// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrgChartApi.Models;

namespace OrgChartApi.Migrations
{
    [DbContext(typeof(OrgChartContext))]
    [Migration("20210826171951_MakeNullableIdToEntityMembers")]
    partial class MakeNullableIdToEntityMembers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("CalendarEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarEvent");
                });

            modelBuilder.Entity("Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long?>("PayrollId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkStatusTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("WorkStatusTemplateId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long?>("PayrollId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkStatusTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("WorkStatusTemplateId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<long?>("PayrollId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkStatusTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("WorkStatusTemplateId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("EntityMembers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubTeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SubTeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("EntityMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Payroll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CutOffDay1")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CutOffDay2")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CutOffDay3")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CutOffDay4")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CutOffType")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PayrollDay1")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PayrollDay2")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Payroll");
                });

            modelBuilder.Entity("SubTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long?>("PayrollId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubTeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkStatusTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("SubTeamId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WorkStatusTemplateId");

                    b.ToTable("SubTeam");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long?>("PayrollId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkStatusTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("WorkStatusTemplateId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("WorkStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WorkStatus");
                });

            modelBuilder.Entity("WorkStatusTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WorkStatusTemplate");
                });

            modelBuilder.Entity("WorkStatuses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("WorkStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkStatusTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkStatusId");

                    b.HasIndex("WorkStatusTemplateId");

                    b.ToTable("WorkStatuses");
                });

            modelBuilder.Entity("CalendarEvent", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany("CalendarEvent")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Company", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.HasOne("Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId");

                    b.HasOne("WorkStatusTemplate", "WorkStatusTemplate")
                        .WithMany()
                        .HasForeignKey("WorkStatusTemplateId");

                    b.Navigation("Calendar");

                    b.Navigation("Employee");

                    b.Navigation("Payroll");

                    b.Navigation("WorkStatusTemplate");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.HasOne("Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId");

                    b.HasOne("WorkStatusTemplate", "WorkStatusTemplate")
                        .WithMany()
                        .HasForeignKey("WorkStatusTemplateId");

                    b.Navigation("Calendar");

                    b.Navigation("Employee");

                    b.Navigation("Payroll");

                    b.Navigation("WorkStatusTemplate");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.HasOne("Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId");

                    b.HasOne("WorkStatusTemplate", "WorkStatusTemplate")
                        .WithMany()
                        .HasForeignKey("WorkStatusTemplateId");

                    b.Navigation("Calendar");

                    b.Navigation("Employee");

                    b.Navigation("Payroll");

                    b.Navigation("WorkStatusTemplate");
                });

            modelBuilder.Entity("EntityMembers", b =>
                {
                    b.HasOne("Company", "Company")
                        .WithMany("EntityMembers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Department", "Department")
                        .WithMany("EntityMembers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Employee", "Employee")
                        .WithMany("EntityMembers")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SubTeam", "SubTeam")
                        .WithMany("EntityMembers")
                        .HasForeignKey("SubTeamId");

                    b.HasOne("Team", "Team")
                        .WithMany("EntityMembers")
                        .HasForeignKey("TeamId");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("SubTeam");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubTeam", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.HasOne("Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId");

                    b.HasOne("SubTeam", null)
                        .WithMany("SubSubTeam")
                        .HasForeignKey("SubTeamId");

                    b.HasOne("Team", "Team")
                        .WithMany("SubTeam")
                        .HasForeignKey("TeamId");

                    b.HasOne("WorkStatusTemplate", "WorkStatusTemplate")
                        .WithMany()
                        .HasForeignKey("WorkStatusTemplateId");

                    b.Navigation("Calendar");

                    b.Navigation("Employee");

                    b.Navigation("Payroll");

                    b.Navigation("Team");

                    b.Navigation("WorkStatusTemplate");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.HasOne("Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId");

                    b.HasOne("WorkStatusTemplate", "WorkStatusTemplate")
                        .WithMany()
                        .HasForeignKey("WorkStatusTemplateId");

                    b.Navigation("Calendar");

                    b.Navigation("Employee");

                    b.Navigation("Payroll");

                    b.Navigation("WorkStatusTemplate");
                });

            modelBuilder.Entity("WorkStatuses", b =>
                {
                    b.HasOne("WorkStatus", "WorkStatus")
                        .WithMany("WorkStatuses")
                        .HasForeignKey("WorkStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkStatusTemplate", "WorkStatusTemplate")
                        .WithMany("WorkStatuses")
                        .HasForeignKey("WorkStatusTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkStatus");

                    b.Navigation("WorkStatusTemplate");
                });

            modelBuilder.Entity("Calendar", b =>
                {
                    b.Navigation("CalendarEvent");
                });

            modelBuilder.Entity("Company", b =>
                {
                    b.Navigation("EntityMembers");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.Navigation("EntityMembers");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Navigation("EntityMembers");
                });

            modelBuilder.Entity("SubTeam", b =>
                {
                    b.Navigation("EntityMembers");

                    b.Navigation("SubSubTeam");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Navigation("EntityMembers");

                    b.Navigation("SubTeam");
                });

            modelBuilder.Entity("WorkStatus", b =>
                {
                    b.Navigation("WorkStatuses");
                });

            modelBuilder.Entity("WorkStatusTemplate", b =>
                {
                    b.Navigation("WorkStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
